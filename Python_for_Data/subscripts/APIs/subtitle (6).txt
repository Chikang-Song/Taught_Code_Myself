Hello. Welcome to Working
With Different File Formats. After watching this video, you will be able to: Define different file formats
such as csv, xml, and json. Write simple programs to read and output data.
List what Python libraries are needed to extract data. When collecting data you will find there are many
different file formats that need to be collected or read in order to complete a
data driven story or analysis. When gathering the data Python can make the
process simpler with its predefined libraries, but before we explore Python let’s first check out
some of the various file formats. When looking at a file name you will notice an extension at the
end of the title. These extensions let you know what type of file it is and what it needed to
open it. For instance if you see a title like “FileExample.csv” you will know this is a “csv”
file. This is only one example of different file types as there are many more such as “json” or
“xml”. When coming across these different file formats and trying to access their data we need
to utilize Python libraries to make this process easier. The first Python library to become
familiar with is called Pandas. By importing this library in the beginning of the code we are then
be able to easily read the different file types. Since we have now imported the Panda library
let’s use it to read the first “csv” file. In this instance we have come across the
“FileExample.csv” file. The first step is to assign the file to a variable. Then create
another variable to read the file with the help of the Panda library. We can then call read_csv
function output the data to the screen. With this example there were no headers for the
data so it added the first line as the header. Since we don’t want the first line of data as the
header let’s find out how to correct this issue. Now that we have learned how to read and
output the data from a “csv” file let’s make it look a little more organized. From the
last example we were able to print out the data but because the file had no headers it
printed the first line of data as a header. We easily solve this by adding a dataframe
attribute. We use the variable “df” to call the file and then add the “columns” attribute.
By adding this one line to our program we can then neatly organize the data output into
the specified headers for each column. The next file format we will explore is the “json”
file format. In this type of file the text is written in a language independent data format and
is similar to a Python dictionary. The first step in reading this type of file is to import json.
After importing “json” we can add a line to open the file call the “load” attribute of “json” to
begin and read the file and lastly we can then print the file. The next file format is “xml”.
This type of file is also known as Extensible Markup Language. While the Pandas library does
not have an attribute to read this type of file let’s explore how to parse this type of file. The
first step to read this type of file is to import xml. By importing this library we can then use
the “etree” attribute to parse the “xml” file. We then add the column headers and assign then to
the dataframe. Then create a loop to go through the document to collect the necessary
data and append the data to a dataframe. In this video, you learned: How
to recognize different file types How to use Python libraries to extract data
How to use dataframes when collecting data